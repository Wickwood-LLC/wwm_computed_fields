<?php

use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;

/**
 * Computed Field Functions.
 */
function computed_field_field_age_compute($entity_type_manager, $entity, $fields, $delta) {  
  if ($entity->field_birthdate->value) {
    $birthdate = date_create_from_format('Y-m-d', date($entity->field_birthdate->value));
    $today = date_create_from_format('Y-m-d', date('Y-m-d'));
    $diff = (array) date_diff($birthdate, $today);
    $value = $diff['y'];
  }

  return $value;
}

function computed_field_field_full_name_compute($entity_type_manager, $entity, $fields, $delta) {  
  $suffix_terms = $entity->get('field_name_suffix')->referencedEntities();
  $suffix_term = reset($suffix_terms);
  $value = $entity->field_first_name->value
    . " " . $entity->field_middle_name->value
    . " " . $entity->field_last_name->value
    . ($suffix_term ? " " . $suffix_term->label() : '');

  return $value;
}

function computed_field_field_proper_full_name_compute($entity_type_manager, $entity, $fields, $delta) {
  $prefix_terms = $entity->get('field_name_prefix')->referencedEntities();
  $prefix_term = reset($prefix_terms);
  $suffix_terms = $entity->get('field_name_suffix')->referencedEntities();
  $suffix_term = reset($suffix_terms);
  $value = ($prefix_term ? $prefix_term->label() . " " : '')
    . $entity->field_first_name->value
    . " " . $entity->field_middle_name->value
    . " " . $entity->field_last_name->value
    . ($suffix_term ? " " . $suffix_term->label() : '');

  return $value;
}

// This function computes for the "Contact Full Name", which is used for the Contact Paragraph. This is different from the "Full Name", which is used for the User entity.
function computed_field_field_contact_full_name_compute($entity_type_manager, $entity, $fields, $delta) {  
  $value = "{$entity->field_contact_first_name ->value} {$entity->field_contact_last_name->value}";
  return $value;
}

function computed_field_field_categories_compute($entity_type_manager, $entity, $fields, $delta) {

  $tids = array();

  if ($entity->get('field_primary_category')->target_id) {
    $tids[] = $entity->get('field_primary_category')->target_id;
  }

  if (!empty($entity->field_additional_categories)) {
    $index = 1;
    foreach ($entity->field_additional_categories as $category) {
      if ($category->target_id) {
        $tids[] = $category->target_id;
      }
    }
  }

  $value = implode(',', array_unique($tids));

  return $value;
}

/**
 * Implements hook_ENTITY_TYPE_presave()
 */
function wwm_computed_fields_node_presave(NodeInterface $node) {
  if ($node->hasField('field_primary_category') && $node->hasField('field_additional_categories') && $node->hasField('field_categories')) {
    $primary_categories = $node->get('field_primary_category')->getValue();
    $additional_categories = $node->get('field_additional_categories')->getValue();
    $node->get('field_categories')->setValue(array_merge($primary_categories, $additional_categories));
  }
}
